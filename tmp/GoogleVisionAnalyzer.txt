'use client';

import { useState, useEffect } from 'react';
import { analyzeImage, VisionAPIResponse } from '@/lib/google-vision';

interface GoogleVisionAnalyzerProps {
  imageFile: File | null;
  imageUrl: string | null;
  gpsData?: {
    latitude: number;
    longitude: number;
  } | null;
}

export default function GoogleVisionAnalyzer({ imageFile, imageUrl, gpsData }: GoogleVisionAnalyzerProps) {
  const [isAnalyzing, setIsAnalyzing] = useState(true); // 鍒濆鐘舵€佽涓哄垎鏋愪腑
  const [results, setResults] = useState<VisionAPIResponse | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'description' | 'data'>('description');

  // 褰搃mageFile鍙樺寲鏃惰嚜鍔ㄨ皟鐢ㄥ垎鏋?
  useEffect(() => {
    if (imageFile) {
      handleAnalyze();
    }
  }, [imageFile]);

  const handleAnalyze = async () => {
    if (!imageFile) {
      setError('璇峰厛涓婁紶鍥剧墖');
      return;
    }

    try {
      setIsAnalyzing(true);
      setError(null);
      
      // 绔嬪嵆璋冪敤Google Vision API鍒嗘瀽鍥剧墖
      const analysisResults = await analyzeImage(imageFile);
      console.log('Google Vision API鍒嗘瀽缁撴灉:', analysisResults);
      setResults(analysisResults);
      
    } catch (err) {
      setError('鍒嗘瀽鍥剧墖鏃跺嚭閿?);
      console.error('鍒嗘瀽鍥剧墖鏃跺嚭閿?', err);
    } finally {
      setIsAnalyzing(false);
    }
  };

  // 鍩轰簬鍒嗘瀽缁撴灉鐢熸垚鎻忚堪
  const generateDescription = () => {
    if (!results) return '';
    
    let description = '';
    let location = '';
    
    // 浠庡垎鏋愮粨鏋滀腑鎻愬彇浣嶇疆淇℃伅
    if (results.landmarkAnnotations && results.landmarkAnnotations.length > 0) {
      location = results.landmarkAnnotations[0].description;
    }
    
    // 鍒嗘瀽浜虹墿
    const people = results.extendedAnalysis?.people;
    if (people) {
      const count = people.count || 1;
      const gender = people.gender || [];
      const race = people.race || [];
      
      // 绗竴娈碉細鎻忚堪鍦烘櫙銆佷汉鐗╁拰浣嶇疆
      description += `In the vicinity of ${location ? `<span class="font-semibold">${location}</span>` : 'the location shown'}, `;
      description += `${count === 1 ? 'an individual' : `${count} individuals`} `;
      description += `share${count === 1 ? 's' : ''} a moment `;
      
      // 娣诲姞鐜鎻忚堪
      if (results.labelAnnotations && results.labelAnnotations.length > 0) {
        const environmentLabels = results.labelAnnotations
          .filter(label => ['tree', 'plant', 'water', 'sky', 'mountain', 'grass', 'foliage', 'nature'].includes(label.description.toLowerCase()))
          .map(label => label.description.toLowerCase());
        
        if (environmentLabels.length > 0) {
          description += 'amidst the backdrop of ';
          if (environmentLabels.includes('tree') || environmentLabels.includes('plant')) {
            description += 'verdant foliage';
          } else if (environmentLabels.includes('water')) {
            description += 'tranquil waters';
          } else if (environmentLabels.includes('mountain')) {
            description += 'majestic mountains';
          } else {
            description += 'the natural setting';
          }
          description += '. ';
        } else {
          description += 'in the scene. ';
        }
      } else {
        description += 'in the scene. ';
      }
      
      // 绗簩娈碉細鎻忚堪浜虹墿鐗瑰緛銆佺鏃忓拰骞撮緞
      description += `${count === 1 ? 'This person' : 'These people'} `;
      
      if (race.length > 0) {
        description += `appear${count === 1 ? 's' : ''} to be of <span class="font-semibold">${race.join(' or ')}</span> descent. `;
      }
      
      // 娣诲姞鏈嶈鍜岀墿鍝佹弿杩?
      if (people.clothing && people.clothing.length > 0) {
        description += `Attired in ${people.clothing.join(', ')}, `;
      }
      
      // 娣诲姞琛ㄦ儏鎴栨儏缁?
      if (people.emotions && Object.values(people.emotions).length > 0) {
        const emotions = Object.values(people.emotions)[0].split('銆?)[0];
        description += `${count === 1 ? 'the person displays' : 'they display'} ${emotions} expressions. `;
      }

      // 绗笁娈碉細鎻忚堪绀句細缁忔祹灞炴€э紙鏀跺叆銆佹斂娌诲€惧悜绛夛級
      if (results.extendedAnalysis?.possibleIncomeRange) {
        description += `Their financial profile suggests an income in the range of <span class="font-semibold">${results.extendedAnalysis.possibleIncomeRange}</span>. `;
      }
      
      // 娣诲姞鏀挎不鍊惧悜锛堝鏋滄湁锛?
      if (results.extendedAnalysis?.possiblePoliticalAffiliation) {
        description += `In terms of political alignment, they may identify with the <span class="font-semibold">${results.extendedAnalysis.possiblePoliticalAffiliation}</span>. `;
      }

      // 绗洓娈碉細鍏磋叮鐖卞ソ鍜屽彲鑳界殑骞垮憡鐩爣
      if (results.extendedAnalysis?.possibleInterests && results.extendedAnalysis.possibleInterests.length > 0) {
        description += `Their interests likely include <span class="font-semibold">${results.extendedAnalysis.possibleInterests.join(', ')}</span>. `;
      }
      
      if (results.extendedAnalysis?.possibleTargetedAds && results.extendedAnalysis.possibleTargetedAds.length > 0) {
        description += `Based on the visual cues, they might be receptive to advertisements relating to ${results.extendedAnalysis.possibleTargetedAds.join(', ')}.`;
      }
    } else {
      // 濡傛灉娌℃湁妫€娴嬪埌浜猴紝鍒欐弿杩扮幆澧?
      description = 'The image captures a scene ';
      if (location) {
        description += `near <span class="font-semibold">${location}</span>. `;
      } else {
        description += '. ';
      }
      
      // 娣诲姞鐗╀綋鎻忚堪
      if (results.labelAnnotations && results.labelAnnotations.length > 0) {
        const topLabels = results.labelAnnotations.slice(0, 5).map(label => label.description);
        description += `Notable elements include ${topLabels.join(', ')}.`;
      }
    }
    
    return description;
  };

  if (!imageFile || !imageUrl) {
    return null;
  }

  return (
    <div className="w-full overflow-hidden bg-black text-white">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-0">
        {/* 宸︿晶锛氬浘鐗囧拰鍦板浘 */}
        <div className="flex flex-col">
          {/* 涓婇儴鍒嗭細鍥剧墖 */}
          <div className="flex items-center justify-center bg-black" style={{height: '50vh'}}>
            <img 
              src={imageUrl} 
              alt="Analyzed" 
              className="max-w-full max-h-full object-contain"
            />
          </div>
          
          {/* 涓嬮儴鍒嗭細鍦板浘 */}
          <div className="relative" style={{height: '30vh'}}>
            {/* 澶囩敤鍦板浘鏄剧ず - 濡傛灉娌℃湁鐪熷疄鍦板浘鏁版嵁 */}
            <div className="absolute inset-0 w-full h-full bg-gray-900/70">
              <div className="absolute inset-0" style={{
                backgroundImage: 'radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px), linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px)',
                backgroundSize: '20px 20px, 100px 100px, 100px 100px'
              }}></div>
              
              {/* 浣嶇疆鏍囪 */}
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-5 h-5 rounded-full bg-red-500"></div>
              </div>
              
              <div className="absolute bottom-0 left-0 right-0 text-xs text-white/50 p-1">
                Imagery 漏2025 Airbus
              </div>
            </div>
          </div>
        </div>
        
        {/* 鍙充晶锛氬垎鏋愮粨鏋?*/}
        <div className="flex flex-col h-full">
          {/* 鏍囩鍒囨崲 */}
          <div className="flex bg-gray-800">
            <button
              className={`py-3 px-6 text-lg w-1/2 text-center transition-colors ${
                activeTab === 'description' 
                  ? 'bg-gray-700 text-white font-medium' 
                  : 'text-gray-400 hover:text-gray-200'
              }`}
              onClick={() => setActiveTab('description')}
            >
              Description 鎻忚堪
            </button>
            <button
              className={`py-3 px-6 text-lg w-1/2 text-center transition-colors ${
                activeTab === 'data' 
                  ? 'bg-gray-700 text-white font-medium' 
                  : 'text-gray-400 hover:text-gray-200'
              }`}
              onClick={() => setActiveTab('data')}
            >
              Data 鏁版嵁
            </button>
          </div>
          
          {/* 鍒嗘瀽鍔犺浇鐘舵€?*/}
          {isAnalyzing && (
            <div className="flex justify-center items-center p-10 flex-grow">
              <div className="flex flex-col items-center">
                <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-white mb-4"></div>
                <p className="text-gray-300">姝ｅ湪鍒嗘瀽鎮ㄧ殑鐓х墖...</p>
              </div>
            </div>
          )}
          
          {/* 鍐呭鍖哄煙 */}
          {!isAnalyzing && (
            <div className="p-6 overflow-y-auto flex-grow">
              {activeTab === 'description' && results && (
                <div className="space-y-4">
                  {/* 涓昏鎻忚堪鍐呭 - 浣跨敤API鍒嗘瀽缁撴灉 */}
                  <div className="text-xl leading-relaxed" 
                    dangerouslySetInnerHTML={{ __html: generateDescription() }}></div>
                </div>
              )}
              
              {activeTab === 'data' && results && (
                <div className="space-y-3">
                  {/* 浣嶇疆淇℃伅 */}
                  {results.landmarkAnnotations && results.landmarkAnnotations.length > 0 && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Location 浣嶇疆</h3>
                      <p>{results.landmarkAnnotations[0].description} - 
                        {results.landmarkAnnotations[0].locations && results.landmarkAnnotations[0].locations.length > 0 ? 
                          `${results.landmarkAnnotations[0].locations[0].latLng.latitude.toFixed(4)}, ${results.landmarkAnnotations[0].locations[0].latLng.longitude.toFixed(4)}` : 
                          '鏈煡鍧愭爣'}
                      </p>
                    </div>
                  )}
                  
                  {/* 浜虹墿淇℃伅 */}
                  {results.extendedAnalysis?.people && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">People 浜虹墿</h3>
                      <p>{results.extendedAnalysis.people.count || 1} {results.extendedAnalysis.people.count === 1 ? 'person' : 'people'}, 
                        {results.extendedAnalysis.people.gender ? ` ${results.extendedAnalysis.people.gender.join(', ')}` : ''} 
                        {results.extendedAnalysis.people.age ? ` ${results.extendedAnalysis.people.age.join(', ')}` : ''}
                      </p>
                    </div>
                  )}
                  
                  {/* 绉嶆棌淇℃伅 */}
                  {results.extendedAnalysis?.people?.race && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Ethnicity 绉嶆棌</h3>
                      <p>{results.extendedAnalysis.people.race.join(', ')}</p>
                    </div>
                  )}
                  
                  {/* 鏀跺叆鑼冨洿 */}
                  {results.extendedAnalysis?.possibleIncomeRange && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Income Range 鏀跺叆鑼冨洿</h3>
                      <p>{results.extendedAnalysis.possibleIncomeRange}</p>
                    </div>
                  )}

                  {/* 鎯呯华 */}
                  {results.extendedAnalysis?.people?.emotions && Object.keys(results.extendedAnalysis.people.emotions).length > 0 && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Emotions 鎯呯华</h3>
                      <p>{Object.entries(results.extendedAnalysis.people.emotions).map(([person, emotion]) => 
                        `${person}: ${emotion}`).join(', ')}</p>
                    </div>
                  )}

                  {/* 鏈嶈 */}
                  {results.extendedAnalysis?.people?.clothing && results.extendedAnalysis.people.clothing.length > 0 && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Clothing 鏈嶈</h3>
                      <p>{results.extendedAnalysis.people.clothing.join(', ')}</p>
                    </div>
                  )}
                  
                  {/* 鍏磋叮鐖卞ソ */}
                  {results.extendedAnalysis?.possibleInterests && results.extendedAnalysis.possibleInterests.length > 0 && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Interests 鍏磋叮鐖卞ソ</h3>
                      <p>{results.extendedAnalysis.possibleInterests.join(', ')}</p>
                    </div>
                  )}
                  
                  {/* 鏀挎不鍊惧悜 */}
                  {results.extendedAnalysis?.possiblePoliticalAffiliation && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Political Affiliation 鏀挎不鍊惧悜</h3>
                      <p>{results.extendedAnalysis.possiblePoliticalAffiliation}</p>
                    </div>
                  )}

                  {/* 鍙兘鐨勫箍鍛婄洰鏍?*/}
                  {results.extendedAnalysis?.possibleTargetedAds && results.extendedAnalysis.possibleTargetedAds.length > 0 && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Targeted Ads 娼滃湪骞垮憡鐩爣</h3>
                      <p>{results.extendedAnalysis.possibleTargetedAds.join(', ')}</p>
                    </div>
                  )}
                  
                  {/* 鐗╀綋璇嗗埆 */}
                  {results.labelAnnotations && results.labelAnnotations.length > 0 && (
                    <div className="bg-gray-800/50 p-3 rounded-lg">
                      <h3 className="font-semibold mb-1">Objects 鐗╀綋</h3>
                      <p>{results.labelAnnotations.slice(0, 6).map(obj => obj.description).join(', ')}</p>
                    </div>
                  )}
                </div>
              )}
              
              {error && (
                <div className="p-4 bg-red-900/20 text-red-400 rounded">
                  {error}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 
